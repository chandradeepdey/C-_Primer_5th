Data abstraction is a programming technique that relies on the separation of interface and implementation. The interface of a class consists of the operations that users of the class can execute. The implementation includes the class' data members, the bodies of the functions that constitute the interface, and any functions needed to define the class that are not intended for general use.
Encapsulation enforces the separation of a class' interface and implementation. A class that is encapsulated hides its implementationâ€”users of the class can use the interface but have no access to the implementation.
In C++, encapsulation is enforced by putting the implementation of a class in its private part.
Benefits:
A class that uses data abstraction and encapsulation defines an abstract data type. In an abstract data type, the class designer worries about HOW the class is implemented. Users of the class can think abstractly about WHAT the type does.
By not allowing users to access the implementation, a class author can make sure that any user code cannot corrupt the state of an encapsulated object.
By letting the users access only the interface, a class author can change the implementation of the class any time they want without changing the interface. This means any code that depended on the interface would continue to work unchanged.
