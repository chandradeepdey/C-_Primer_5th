a) legal. checks if ptr is the null pointer. if not, the expression increments
   ptr and proceeds to dereference the value contained in ptr before the
   increment. if ptr was a valid pointer, ptr + 1 will also be a valid pointer,
   but it might not be dereferencable (one past array/object).

b) legal. && operator guarantees that side effects of the left operand are
   evaluated completely before evaluation of the right side. the value of ival
   is incremented, the previous value is used to test if it was nonzero. if it
   was nonzero, the new value is tested if it is now nonzero.

c) illegal, tries to modify a variable and access it in the same expression.
   correction - ++ival, vec[ival - 1] <= vec[ival]
   comma operator guarantees similar side effect evaluation as the logical AND
   and the logical OR operators.
