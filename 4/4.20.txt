vector<string>::iterator iter;
a) legal. iter is incremented, a copy of iter is stored before this increment. this copy is dereferenced. the new value of iter may or may not be dereferencable (off-the-end iterator), but it will be a valid iterator value.
b) illegal. (*iter) will be a string. there is no increment operation on an entire string.
c) illegal. parenthesising yields (*((iter.empty)())). iter won't have a member named empty, it is a pointer.
d) legal. iter-> dereferences iter, producing an std::string. it has a member function named empty().
e) illegal. parenthesising yields (++(*iter)). *iter is a string. there is no increment operation on an entire string.
f) legal. saves a copy of current iter and then increments iter. the copy is dereferenced to find if the string pointed to by it was empty or not. the new value of iter is legal, but it might not be dereferencable (off-the-end iterator).
